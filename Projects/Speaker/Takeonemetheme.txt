import time
import board
import pwmio

# Pin for piezo buzzer
buzzer = pwmio.PWMOut(board.D10, duty_cycle=0, frequency=440, variable_frequency=True)

# Define note frequencies
NOTE_B4 = 494
NOTE_D5 = 587
NOTE_E5 = 659
NOTE_FS5 = 740
NOTE_GS5 = 831
NOTE_A5 = 880
NOTE_B5 = 988
REST = 0

# Define the melody and durations (intro part only for memory efficiency)
melody = [
    (NOTE_FS5, 8), (NOTE_FS5, 8), (NOTE_D5, 8), (NOTE_B4, 8), (REST, 8), (NOTE_B4, 8), (REST, 8), (NOTE_E5, 8),
    (REST, 8), (NOTE_E5, 8), (REST, 8), (NOTE_E5, 8), (NOTE_GS5, 8), (NOTE_GS5, 8), (NOTE_A5, 8), (NOTE_B5, 8),
    (NOTE_A5, 8), (NOTE_A5, 8), (NOTE_A5, 8), (NOTE_E5, 8), (REST, 8), (NOTE_D5, 8), (REST, 8), (NOTE_FS5, 8),
    (REST, 8), (NOTE_FS5, 8), (REST, 8), (NOTE_FS5, 8), (NOTE_E5, 8), (NOTE_E5, 8), (NOTE_FS5, 8), (NOTE_E5, 8),
]

# Tempo and duration calculation
tempo = 140
wholenote = (60000 * 4) / tempo  # ms per whole note

def play_tone(freq, duration_ms):
    if freq == 0:
        buzzer.duty_cycle = 0
    else:
        buzzer.frequency = freq
        buzzer.duty_cycle = 32768
    time.sleep(duration_ms / 1000)
    buzzer.duty_cycle = 0
    time.sleep(0.02)

# Play the melody
for note, divider in melody:
    duration = (wholenote / divider) if divider > 0 else (wholenote / abs(divider)) * 1.5
    play_tone(note, duration * 0.9)

print("Done playing Take On Me (intro).")
