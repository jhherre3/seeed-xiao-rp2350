import time
import board
import pwmio

# Define note frequencies (Hz)
NOTE_E5 = 659
NOTE_DS5 = 622
NOTE_B4 = 494
NOTE_D5 = 587
NOTE_C5 = 523
NOTE_A4 = 440
NOTE_C4 = 262
NOTE_E4 = 330
NOTE_GS4 = 415
REST = 0

# Melody: Fur Elise Intro
melody = [
    (NOTE_E5, 16), (NOTE_DS5, 16),
    (NOTE_E5, 16), (NOTE_DS5, 16), (NOTE_E5, 16), (NOTE_B4, 16), (NOTE_D5, 16), (NOTE_C5, 16),
    (NOTE_A4, -8), (NOTE_C4, 16), (NOTE_E4, 16), (NOTE_A4, 16),
    (NOTE_B4, -8), (NOTE_E4, 16), (NOTE_GS4, 16), (NOTE_B4, 16),
    (NOTE_C5, 8), (REST, 16), (NOTE_E4, 16), (NOTE_E5, 16), (NOTE_DS5, 16),

    (NOTE_E5, 16), (NOTE_DS5, 16), (NOTE_E5, 16), (NOTE_B4, 16), (NOTE_D5, 16), (NOTE_C5, 16),
    (NOTE_A4, -8), (NOTE_C4, 16), (NOTE_E4, 16), (NOTE_A4, 16),
    (NOTE_B4, -8), (NOTE_E4, 16), (NOTE_C5, 16), (NOTE_B4, 16),
    (NOTE_A4, 4), (REST, 8),
]

# Calculate duration of a whole note based on tempo
tempo = 80
wholenote = (60000 * 4) / tempo  # in ms

# Set up PWM output for piezo on D10
buzzer = pwmio.PWMOut(board.D10, duty_cycle=0, frequency=440, variable_frequency=True)

def play_tone(frequency, duration_ms):
    if frequency == 0:
        buzzer.duty_cycle = 0
    else:
        buzzer.frequency = frequency
        buzzer.duty_cycle = 32768  # 50% duty cycle
    time.sleep(duration_ms / 1000)
    buzzer.duty_cycle = 0
    time.sleep(0.02)  # Short pause between notes

# Play melody
for note, divider in melody:
    if divider > 0:
        note_duration = wholenote / divider
    else:
        note_duration = (wholenote / abs(divider)) * 1.5
    play_tone(note, note_duration)

print("Done playing Fur Elise intro.")
